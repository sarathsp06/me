<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sarath Sadasivan Pillai</title>
    <link>https://profile.sarathsp.com/</link>
    <description>Recent content on Sarath Sadasivan Pillai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 22 Feb 2019 01:09:48 +0100</lastBuildDate>
    
	<atom:link href="https://profile.sarathsp.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://profile.sarathsp.com/about/</link>
      <pubDate>Fri, 22 Feb 2019 01:09:48 +0100</pubDate>
      
      <guid>https://profile.sarathsp.com/about/</guid>
      <description>A techies attempt to write his thoughts on rock,paper,computer,web
import life life.init() while life.ticking(): life.eat() life.code() life.sleep() life.Close() ## run time error , you don&amp;#39;t have permission to your life anymore</description>
    </item>
    
    <item>
      <title>Python 2factor Client</title>
      <link>https://profile.sarathsp.com/projects/python-2factor-client/</link>
      <pubDate>Fri, 22 Feb 2019 01:09:41 +0100</pubDate>
      
      <guid>https://profile.sarathsp.com/projects/python-2factor-client/</guid>
      <description>Two-factor authentication (also known as 2FA) is a type (subset) of multi-factor authentication. It is a method of confirming a user&amp;rsquo;s claimed identity by utilizing a combination of two different factors: 1. something they know, 2. something they have, or 3. something they are.
 py2factor app
 Two Factor authentication app for desktop (Linux). The app can be used along with other two factor applications like authy ,google authenticator etc.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://profile.sarathsp.com/posts/helloworld/</link>
      <pubDate>Thu, 21 Feb 2019 18:52:44 +0100</pubDate>
      
      <guid>https://profile.sarathsp.com/posts/helloworld/</guid>
      <description>A techies attempt to write his thoughts on rock,paper,computer,web
import life life.init() while life.ticking(): life.eat() life.code() life.sleep() life.Close() ## run time error , you don&amp;#39;t have permission to your life anymore</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://profile.sarathsp.com/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://profile.sarathsp.com/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
  </channel>
</rss>